generator client {
  provider   = "prisma-client-js"
  output     = "../src/generated/prisma"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bio           String?
  location      String?
  website       String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  reviews       Review[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model City {
  id               String   @id @default(cuid())
  name             String   @unique
  country          String
  region           String?
  latitude         Float
  longitude        Float
  population       Int?
  timezone         String?
  costOfLiving     Int?
  internetSpeed    Float?
  safetyRating     Float?
  walkability      Float?
  nightlife        Float?
  culture          Float?
  weather          Float?
  description      String?
  shortDescription String?
  imageUrl         String?
  imageAttribution String?
  featured         Boolean  @default(false)
  verified         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  reviews          Review[]

  @@index([featured, verified])
  @@index([country])
  @@index([costOfLiving])
  @@index([internetSpeed])
  @@index([safetyRating])
  @@index([walkability])
  @@index([createdAt])
  @@index([name, country])
  @@index([featured, costOfLiving, internetSpeed])
  @@map("cities")
}

model Review {
  id             String   @id @default(cuid())
  rating         Int
  title          String
  content        String
  internetRating Int?
  costRating     Int?
  safetyRating   Int?
  funRating      Int?
  helpful        Int      @default(0)
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  cityId         String
  city           City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cityId])
  @@index([cityId])
  @@index([rating])
  @@index([createdAt])
  @@map("reviews")
}

enum UserRole {
  USER
  ADMIN
}
