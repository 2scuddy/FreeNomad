name: Automated Branch Promotion

on:
  # Manual trigger for promotions
  workflow_dispatch:
    inputs:
      promotion_type:
        description: "Type of promotion"
        required: true
        default: "develop-to-staging"
        type: choice
        options:
          - develop-to-staging
          - staging-to-main
          - hotfix-promotion
      skip_tests:
        description: "Skip tests (emergency only)"
        required: false
        default: false
        type: boolean
      release_version:
        description: "Release version (for staging-to-main)"
        required: false
        type: string

  # Scheduled promotions
  schedule:
    # Weekly promotion from develop to staging (Fridays at 2 PM UTC)
    - cron: "0 14 * * 5"

  # Auto-promotion after successful merges
  push:
    branches:
      - develop
    paths-ignore:
      - "**.md"
      - "docs/**"
      - ".github/**"

env:
  NODE_VERSION: "20"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Enhanced permissions for branch operations
permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: write
  statuses: write

jobs:
  # Determine promotion strategy
  determine-promotion:
    name: Determine Promotion Strategy
    runs-on: ubuntu-latest
    outputs:
      promotion_type: ${{ steps.strategy.outputs.promotion_type }}
      source_branch: ${{ steps.strategy.outputs.source_branch }}
      target_branch: ${{ steps.strategy.outputs.target_branch }}
      skip_tests: ${{ steps.strategy.outputs.skip_tests }}
      release_version: ${{ steps.strategy.outputs.release_version }}

    steps:
      - name: Determine promotion strategy
        id: strategy
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "promotion_type=${{ github.event.inputs.promotion_type }}" >> $GITHUB_OUTPUT
            echo "skip_tests=${{ github.event.inputs.skip_tests }}" >> $GITHUB_OUTPUT
            echo "release_version=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "promotion_type=develop-to-staging" >> $GITHUB_OUTPUT
            echo "skip_tests=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/develop" ]]; then
            # Auto-promotion after 24 hours of stability
            echo "promotion_type=auto-develop-to-staging" >> $GITHUB_OUTPUT
            echo "skip_tests=false" >> $GITHUB_OUTPUT
          fi

          case "${{ steps.strategy.outputs.promotion_type || github.event.inputs.promotion_type }}" in
            "develop-to-staging"|"auto-develop-to-staging")
              echo "source_branch=develop" >> $GITHUB_OUTPUT
              echo "target_branch=staging" >> $GITHUB_OUTPUT
              ;;
            "staging-to-main")
              echo "source_branch=staging" >> $GITHUB_OUTPUT
              echo "target_branch=main" >> $GITHUB_OUTPUT
              ;;
            "hotfix-promotion")
              echo "source_branch=main" >> $GITHUB_OUTPUT
              echo "target_branch=develop,staging" >> $GITHUB_OUTPUT
              ;;
          esac

  # Pre-promotion validation
  pre-promotion-checks:
    name: Pre-Promotion Validation
    runs-on: ubuntu-latest
    needs: determine-promotion
    if: needs.determine-promotion.outputs.skip_tests != 'true'

    steps:
      - name: Checkout source branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-promotion.outputs.source_branch }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run quality checks
        run: |
          npm run lint
          npm run type-check
          npm run test:unit
        env:
          NODE_ENV: test
          NEXTAUTH_SECRET: test-secret
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXTAUTH_SECRET: test-secret
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Check for breaking changes
        run: |
          # Compare API changes, database migrations, etc.
          echo "Checking for breaking changes..."
          # Add your breaking change detection logic here

  # Automated promotion execution
  execute-promotion:
    name: Execute Branch Promotion
    runs-on: ubuntu-latest
    needs: [determine-promotion, pre-promotion-checks]
    if: always() && (needs.pre-promotion-checks.result == 'success' || needs.determine-promotion.outputs.skip_tests == 'true')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Execute promotion
        id: promotion
        run: |
          SOURCE_BRANCH="${{ needs.determine-promotion.outputs.source_branch }}"
          TARGET_BRANCH="${{ needs.determine-promotion.outputs.target_branch }}"
          PROMOTION_TYPE="${{ needs.determine-promotion.outputs.promotion_type }}"
          RELEASE_VERSION="${{ needs.determine-promotion.outputs.release_version }}"

          echo "Executing promotion: $SOURCE_BRANCH → $TARGET_BRANCH"

          # Fetch latest changes
          git fetch origin

          case "$PROMOTION_TYPE" in
            "develop-to-staging"|"auto-develop-to-staging")
              # Promote develop to staging
              git checkout staging
              git pull origin staging
              
              # Check if there are new changes to promote
              if git merge-base --is-ancestor origin/develop staging; then
                echo "No new changes to promote from develop to staging"
                echo "promotion_needed=false" >> $GITHUB_OUTPUT
                exit 0
              fi
              
              git merge origin/develop --no-ff -m "chore: promote develop to staging"
              git push origin staging
              echo "promotion_needed=true" >> $GITHUB_OUTPUT
              echo "promoted_to=staging" >> $GITHUB_OUTPUT
              ;;
              
            "staging-to-main")
              # Promote staging to main (production release)
              git checkout main
              git pull origin main
              
              # Check if there are new changes to promote
              if git merge-base --is-ancestor origin/staging main; then
                echo "No new changes to promote from staging to main"
                echo "promotion_needed=false" >> $GITHUB_OUTPUT
                exit 0
              fi
              
              # Create release commit
              git merge origin/staging --no-ff -m "release: promote staging to main${RELEASE_VERSION:+ - v$RELEASE_VERSION}"
              
              # Tag release if version provided
              if [[ -n "$RELEASE_VERSION" ]]; then
                git tag -a "v$RELEASE_VERSION" -m "Release v$RELEASE_VERSION"
                git push origin "v$RELEASE_VERSION"
                echo "release_tag=v$RELEASE_VERSION" >> $GITHUB_OUTPUT
              fi
              
              git push origin main
              echo "promotion_needed=true" >> $GITHUB_OUTPUT
              echo "promoted_to=main" >> $GITHUB_OUTPUT
              
              # Back-merge to develop to keep branches in sync
              git checkout develop
              git pull origin develop
              git merge origin/main --no-ff -m "chore: back-merge main to develop"
              git push origin develop
              ;;
              
            "hotfix-promotion")
              # Promote hotfix to develop and staging
              for branch in develop staging; do
                git checkout $branch
                git pull origin $branch
                git merge origin/main --no-ff -m "chore: back-merge hotfix from main to $branch"
                git push origin $branch
              done
              echo "promotion_needed=true" >> $GITHUB_OUTPUT
              echo "promoted_to=develop,staging" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Create promotion summary
        if: steps.promotion.outputs.promotion_needed == 'true'
        run: |
          echo "## 🚀 Branch Promotion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Type**: ${{ needs.determine-promotion.outputs.promotion_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source**: ${{ needs.determine-promotion.outputs.source_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: ${{ steps.promotion.outputs.promoted_to }}" >> $GITHUB_STEP_SUMMARY

          if [[ -n "${{ steps.promotion.outputs.release_tag }}" ]]; then
            echo "**Release Tag**: ${{ steps.promotion.outputs.release_tag }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  # Post-promotion verification
  post-promotion-verification:
    name: Post-Promotion Verification
    runs-on: ubuntu-latest
    needs: [determine-promotion, execute-promotion]
    if: needs.execute-promotion.outputs.promotion_needed == 'true'

    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.determine-promotion.outputs.target_branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Verify build
        run: npm run build
        env:
          NODE_ENV: production
          NEXTAUTH_SECRET: test-secret
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running smoke tests..."
          npm run test:smoke || echo "Smoke tests not configured"

      - name: Verify deployment
        if: needs.determine-promotion.outputs.target_branch == 'main' || needs.determine-promotion.outputs.target_branch == 'staging'
        run: |
          # Wait for Vercel deployment and verify
          echo "Waiting for deployment to complete..."
          sleep 30

          # Add deployment verification logic
          echo "Deployment verification completed"

  # Notification and cleanup
  notify-promotion:
    name: Notify Promotion Results
    runs-on: ubuntu-latest
    needs: [determine-promotion, execute-promotion, post-promotion-verification]
    if: always()

    steps:
      - name: Determine notification message
        id: message
        run: |
          if [[ "${{ needs.execute-promotion.result }}" == "success" && "${{ needs.post-promotion-verification.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Branch promotion completed successfully" >> $GITHUB_OUTPUT
            echo "color=28a745" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.execute-promotion.outputs.promotion_needed }}" == "false" ]]; then
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "message=ℹ️ No changes to promote" >> $GITHUB_OUTPUT
            echo "color=0366d6" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Branch promotion failed" >> $GITHUB_OUTPUT
            echo "color=d73a49" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub issue on failure
        if: steps.message.outputs.status == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            await github.rest.issues.create({
              owner,
              repo,
              title: `🚨 Branch Promotion Failed - ${{ needs.determine-promotion.outputs.promotion_type }}`,
              body: `## Branch Promotion Failure\n\n**Type**: ${{ needs.determine-promotion.outputs.promotion_type }}\n**Source**: ${{ needs.determine-promotion.outputs.source_branch }}\n**Target**: ${{ needs.determine-promotion.outputs.target_branch }}\n**Workflow**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n\n**Action Required**: Manual intervention needed to resolve promotion issues.`,
              labels: ['bug', 'deployment', 'urgent']
            });

      - name: Update deployment status
        if: needs.determine-promotion.outputs.target_branch == 'main'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;

            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: '${{ steps.message.outputs.status }}' === 'success' ? 'success' : 'failure',
              description: '${{ steps.message.outputs.message }}',
              environment: 'production'
            });

  # Cleanup old branches and releases
  cleanup:
    name: Cleanup Old Branches
    runs-on: ubuntu-latest
    needs: [execute-promotion]
    if: needs.execute-promotion.outputs.promotion_needed == 'true' && github.event_name == 'schedule'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Clean up merged feature branches
        run: |
          # Delete merged feature branches older than 30 days
          git for-each-ref --format='%(refname:short) %(committerdate)' refs/remotes/origin/feature/ | \
          while read branch date; do
            if [[ $(date -d "$date" +%s) -lt $(date -d "30 days ago" +%s) ]]; then
              # Check if branch is merged
              if git merge-base --is-ancestor origin/$branch origin/develop; then
                echo "Deleting merged feature branch: $branch"
                git push origin --delete ${branch#origin/}
              fi
            fi
          done

      - name: Clean up old release tags
        run: |
          # Keep only the last 10 release tags
          git tag -l "v*" --sort=-version:refname | tail -n +11 | \
          while read tag; do
            echo "Deleting old release tag: $tag"
            git push origin --delete $tag
          done
