name: Branch Deployment Strategy

on:
  push:
    branches:
      - main
      - staging
      - development
      - "feature/*"
  pull_request:
    branches:
      - main
      - staging
      - development

env:
  NODE_VERSION: "20"
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Quality checks for all branches
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Environment validation
        run: |
          echo "NEXTAUTH_SECRET=test-secret-for-ci" > .env.test
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" >> .env.test
          node vercel-env-validation.js || echo "Environment validation completed with warnings"
        env:
          NODE_ENV: test

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          NEXTAUTH_SECRET: test-secret-for-ci
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/freenomad_test

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXTAUTH_SECRET: test-secret-for-ci
          DATABASE_URL: postgresql://test:test@localhost:5432/test

  # Integration tests for develop and staging branches
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: freenomad_test
          POSTGRES_HOST_AUTH_METHOD: md5
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/freenomad_test

      - name: Run integration tests
        run: |
          # Check if integration test script exists, fallback to unit tests
          if npm run | grep -q "test:integration"; then
            npm run test:integration
          else
            echo "Integration test script not found, running unit tests instead"
            npm run test
          fi
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/freenomad_test
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000
        timeout-minutes: 15
        continue-on-error: false

  # E2E tests for staging and main branches
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          NEXTAUTH_SECRET: test-secret-for-ci
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/freenomad_test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  # Vercel deployment for different environments
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Determine environment
        id: env-name
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "alias=--prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "alias=--target=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "alias=--target=development" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "alias=" >> $GITHUB_OUTPUT
          fi

      - name: Check Vercel Token
        id: check-token
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "token-available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è VERCEL_TOKEN secret is not configured. Skipping Vercel deployment."
            echo "To enable Vercel deployment, add VERCEL_TOKEN to repository secrets."
          else
            echo "token-available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ VERCEL_TOKEN is configured."
          fi

      - name: Pull Vercel Environment Information
        if: steps.check-token.outputs.token-available == 'true'
        run: vercel pull --yes --environment=${{ steps.env-name.outputs.environment }} --token="${{ secrets.VERCEL_TOKEN }}"
        continue-on-error: true

      - name: Build Project Artifacts
        if: steps.check-token.outputs.token-available == 'true'
        run: vercel build ${{ steps.env-name.outputs.alias }} --token="${{ secrets.VERCEL_TOKEN }}"
        timeout-minutes: 10
        continue-on-error: false

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        if: steps.check-token.outputs.token-available == 'true'
        run: |
          url=$(vercel deploy --prebuilt ${{ steps.env-name.outputs.alias }} --token="${{ secrets.VERCEL_TOKEN }}")
          echo "deployment-url=$url" >> $GITHUB_OUTPUT
          echo "Deployment URL: $url"
        timeout-minutes: 15
        continue-on-error: false

      - name: Skip Vercel Deployment
        if: steps.check-token.outputs.token-available == 'false'
        run: |
          echo "deployment-url=https://github.com/${{ github.repository }}/tree/${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è Vercel deployment skipped due to missing VERCEL_TOKEN secret."
          echo "üìñ To enable Vercel deployment:"
          echo "   1. Get your Vercel token from https://vercel.com/account/tokens"
          echo "   2. Add it as VERCEL_TOKEN in repository secrets"
          echo "   3. Also add VERCEL_ORG_ID and VERCEL_PROJECT_ID secrets"

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';
            const tokenAvailable = '${{ steps.check-token.outputs.token-available }}';
            
            let body;
            if (tokenAvailable === 'true' && deploymentUrl) {
              body = `üöÄ **Deployment Preview**: ${deploymentUrl}\n\n**Branch**: \`${{ github.head_ref }}\`\n**Environment**: ${{ steps.env-name.outputs.environment }}`;
            } else {
              body = `‚ö†Ô∏è **Deployment Skipped**: Vercel token not configured\n\n**Branch**: \`${{ github.head_ref }}\`\n**Status**: Build successful, but deployment requires VERCEL_TOKEN secret\n\nüìñ To enable deployments, add VERCEL_TOKEN to repository secrets.`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  # Security and dependency checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Run dependency vulnerability check
        run: |
          if [ -f ".audit-ci.json" ]; then
            npx audit-ci --config .audit-ci.json || echo "Security audit completed with warnings"
          else
            echo "No audit-ci config found, running basic npm audit"
            npm audit --audit-level=moderate || echo "Security audit completed with warnings"
          fi
        continue-on-error: true

  # Lighthouse performance checks for production
  lighthouse-checks:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Notification for successful deployments
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-vercel, integration-tests, e2e-tests]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')

    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [[ "${{ needs.deploy-vercel.result }}" == "success" && "${{ needs.integration-tests.result }}" != "failure" && "${{ needs.e2e-tests.result }}" != "failure" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=‚úÖ Build and tests successful" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Build or tests failed" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            const environment = '${{ github.ref }}' === 'refs/heads/main' ? 'production' : 'staging';

            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: '${{ steps.status.outputs.status }}',
              description: '${{ steps.status.outputs.message }}',
              environment_url: '${{ needs.deploy-vercel.outputs.deployment-url }}'
            });
