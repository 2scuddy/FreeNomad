name: Branch Deployment Strategy

on:
  push:
    branches:
      - main
      - staging
      - development
      - "feature/*"
  pull_request:
    branches:
      - main
      - staging
      - development

env:
  NODE_VERSION: "20"

jobs:
  # Quality checks for all branches
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          NEXTAUTH_SECRET: test-secret-for-ci
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/freenomad_test

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXTAUTH_SECRET: test-secret-for-ci
          DATABASE_URL: postgresql://test:test@localhost:5432/test

  # Integration tests for develop and staging branches
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/development' || github.ref == 'refs/heads/staging'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: freenomad_test
          POSTGRES_HOST_AUTH_METHOD: md5
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/freenomad_test

      - name: Run integration tests
        run: |
          # Check if integration test script exists, fallback to unit tests
          if npm run | grep -q "test:integration"; then
            npm run test:integration
          else
            echo "Integration test script not found, running unit tests instead"
            npm run test
          fi
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/freenomad_test
          NEXTAUTH_SECRET: test-secret-for-ci
          NEXTAUTH_URL: http://localhost:3000
        timeout-minutes: 15
        continue-on-error: false

  # E2E tests for staging and main branches
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          NEXTAUTH_SECRET: test-secret-for-ci
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/freenomad_test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  # Build verification (Vercel handles automatic deployment)
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'build-verification-secret' }}
          NEXTAUTH_URL: https://freenomad.vercel.app
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://test:test@localhost:5432/test' }}
        timeout-minutes: 10

      - name: Verify build output
        run: |
          if [ ! -d ".next" ]; then
            echo "❌ Build failed: .next directory not found"
            exit 1
          fi
          echo "✅ Build successful: .next directory exists"
          echo "📦 Build artifacts ready for Vercel automatic deployment"

      - name: Comment build status on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ github.head_ref }}';
            const environment = '${{ github.ref }}' === 'refs/heads/main' ? 'production' : 'preview';
            
            const body = `✅ **Build Verification Passed**\n\n**Branch**: \`${branch}\`\n**Environment**: ${environment}\n**Status**: Ready for automatic Vercel deployment\n\n🚀 Vercel will automatically deploy this branch when merged.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  # Security and dependency checks
  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Run dependency vulnerability check
        run: |
          if [ -f ".audit-ci.json" ]; then
            npx audit-ci --config .audit-ci.json || echo "Security audit completed with warnings"
          else
            echo "No audit-ci config found, running basic npm audit"
            npm audit --audit-level=moderate || echo "Security audit completed with warnings"
          fi
        continue-on-error: true

  # Lighthouse performance checks for production
  lighthouse-checks:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [build-verification]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Notification for successful builds
  notify-build:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-verification, integration-tests, e2e-tests]
    if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')

    steps:
      - name: Determine build status
        id: status
        run: |
          if [[ "${{ needs.build-verification.result }}" == "success" && "${{ needs.integration-tests.result }}" != "failure" && "${{ needs.e2e-tests.result }}" != "failure" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Build verification and tests successful - Ready for automatic Vercel deployment" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Build verification or tests failed" >> $GITHUB_OUTPUT
          fi

      - name: Create build status comment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;
            const environment = '${{ github.ref }}' === 'refs/heads/main' ? 'production' : 'staging';
            const status = '${{ steps.status.outputs.status }}';
            const message = '${{ steps.status.outputs.message }}';

            // Create a commit status
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: status === 'success' ? 'success' : 'failure',
              description: message,
              context: 'ci/build-verification'
            });

            console.log(`Build status: ${status}`);
            console.log(`Message: ${message}`);
            console.log(`Environment: ${environment}`);
            console.log('Vercel will handle automatic deployment for successful builds.');
